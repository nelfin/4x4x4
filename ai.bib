Automatically generated by Mendeley 1.3.1
Any changes to this file will be lost if it is regenerated by Mendeley.

@article{Stam2003,
abstract = {In this paper we present a simple and rapid implementation of a fluid dynamics solver for game engines. Our tools can greatly enhance games by providing realistic fluid-like effects such as swirling smoke past a moving character. The potential applications are endless. Our algorithms are based on the physical equations of fluid flow, namely the Navier-Stokes equations. These equations are notoriously hard to solve when strict physical accuracy is of prime importance. Our solvers on the other hand are geared towards visual quality. Our emphasis is on stability and speed, which means that our simulations can be advanced with arbitrary time steps. We also demonstrate that our solvers are easy to code by providing a complete C code implementation in this paper. Our algorithms run in real-time for reasonable grid sizes in both two and three dimensions on standard PC hardware, as demonstrated during the presentation of this paper at the conference.},
author = {Stam, Jos},
file = {:home/andrew/uni/research/2003/Stam\_2003\_Real-time fluid dynamics for games.pdf:pdf},
journal = {Proceedings of the Game Developer Conference},
title = {{Real-time fluid dynamics for games}},
url = {http://www.dgp.toronto.edu/people/stam/reality/Research/pdf/GDC03.pdf},
volume = {18},
year = {2003}
}
@misc{TheMendeleySupportTeam2011,
abstract = {A quick introduction to Mendeley. Learn how Mendeley creates your personal digital library, how to organize and annotate documents, how to collaborate and share with colleagues, and how to generate citations and bibliographies.},
address = {London},
author = {{The Mendeley Support Team}},
booktitle = {Mendeley Desktop},
file = {:home/andrew/uni/research/2011/The Mendeley Support Team\_2011\_Getting Started with Mendeley.pdf:pdf},
keywords = {Mendeley,how-to,user manual},
pages = {1--16},
publisher = {Mendeley Ltd.},
title = {{Getting Started with Mendeley}},
url = {http://www.mendeley.com},
year = {2011}
}
@book{Milne2011,
author = {Milne, James S},
file = {:home/andrew/uni/research/2011/Milne\_2011\_Fields and Galois Theory (v 4.22).pdf:pdf},
pages = {126},
title = {{Fields and Galois Theory (v 4.22)}},
url = {http://jmilne.org/math/CourseNotes/ft.html},
year = {2011}
}
@article{Hopcroft1973,
abstract = {Efficient algorithms are presented for partitioning a graph into connected components, biconnected components and simple paths. The algorithm for partitioning of a graph into simple paths is iterative and each iteration produces a new path between two vertices already on paths. (The start vertex can be specified dynamically.) If V is the number of vertices and E is the number of edges, each algorithm requires time and space proportional to max (V, E) when executed on a random access computer.},
author = {Hopcroft, John and Tarjan, Robert},
doi = {10.1145/362248.362272},
file = {:home/andrew/uni/research/1973/Hopcroft, Tarjan\_1973\_Algorithm 447 efficient algorithms for graph manipulation.pdf:pdf},
issn = {00010782},
journal = {Communications of the ACM},
keywords = {analysis of algorithms,and phrases,graph,graphs},
month = jun,
number = {6},
pages = {372--378},
title = {{Algorithm 447: efficient algorithms for graph manipulation}},
url = {http://dl.acm.org/citation.cfm?id=362272 http://portal.acm.org/citation.cfm?doid=362248.362272},
volume = {16},
year = {1973}
}
@phdthesis{Allis1994,
author = {Allis, LV},
doi = {10.1.1.99.5364},
file = {:home/andrew/uni/research/1994/Allis\_1994\_Searching for solutions in games and artificial intelligence.pdf:pdf},
isbn = {90-9007488-0},
keywords = {artificial intelligence,games,search},
pages = {207},
school = {Maastricht University},
title = {{Searching for solutions in games and artificial intelligence}},
url = {http://pudn.ganjiyo.com/:read/downloads13/doc/52132/thesis.pdf},
year = {1994}
}
@article{Takaoka1998,
abstract = {In this paper we give three subcubic cost algorithms for the all pairs shortest distance (APSD) and path (APSP) problems. The first is a parallel algorithm that solves the APSD problem for a directed graph with unit edge costs in O(log\^{}2 n) time with O(n\^{}$\mu$ / sqrt(log n)) processors where $\mu$ = 2.688 on an EREW PRAM. The second parallel algorithm solves the APSP, and consequently APSD, problem for a directed graph with nonnegative general costs (real numbers) in O(log\^{}2 n) time with o(n\^{}3) subcubic cost. Previously this cost was greater than O(n\^{}3). Finally we improve with respect to M the complexity O((Mn)\^{}$\mu$) of a sequential algorithm for a graph with edge costs up to M to O(M\^{}1/3 n\^{}((6+$\omega$)/3) (log n)\^{}2/3 (log log n)\^{}1/3) in the APSD problem, where $\omega$ = 2.376.},
author = {Takaoka, Tadao},
file = {:home/andrew/uni/research/1998/Takaoka\_1998\_Subcubic cost algorithms for the all pairs shortest path problem.pdf:pdf},
journal = {Algorithmica},
keywords = {1,all pairs shortest path,apsp,directed graph with nonnegative,general cost problem,introduction,of vertices of a,parallel algorithm,path,paths between all pairs,problem,problem is to compute,real numbers as,shortest,the all pairs shortest,two-phase algorithm,unit cost problem},
number = {3},
pages = {309--318},
title = {{Subcubic cost algorithms for the all pairs shortest path problem}},
url = {http://www.springerlink.com/index/7488tuy5je282nj5.pdf},
volume = {20},
year = {1998}
}
@article{Patashnik1980,
author = {Patashnik, Oren},
file = {:home/andrew/uni/research/1980/Patashnik\_1980\_Qubic 4x4x4 Tic-Tac-Toe.pdf:pdf},
journal = {Mathematics Magazine},
keywords = {ai,game tree,games},
number = {4},
pages = {202--216},
title = {{Qubic: 4x4x4 Tic-Tac-Toe}},
url = {http://www.jstor.org/stable/2689613 },
volume = {53},
year = {1980}
}
@techreport{Bogenschutz2010,
abstract = {This paper will discuss how we implementated an intelligent game of 3D tic-tac-toe in C++ using the minimax algorithm and alpha-beta prunting.},
address = {Ripon},
author = {Bogenschutz, BD},
booktitle = {Computer},
file = {:home/andrew/uni/research/2010/Bogenschutz\_2010\_Artificial Intelligence Implementing 3D Tic-Tac-Toe in C.pdf:pdf},
institution = {Ripon College},
keywords = {alpha-beta pruning,artificial intelligence,heuristic,minimax,ply},
number = {May},
pages = {5--8},
title = {{Artificial Intelligence: Implementing 3D Tic-Tac-Toe in C++}},
url = {http://www.ripon.edu/ACADEMICS/macs/summation/2010/articles/B. Bogenschutz - 3D TTT in C++.pdf},
year = {2010}
}
